'''Однажды, простояв в пробке 8 часов в машине скорой помощи с застрявшей рыбьей костью в горле,
мне пришла мысль - написать программу расчета времени пути с учетом скорости и пробок.
Вам нужно создать функцию road, которая принимает целочисленные позиционные аргументы -
дистанцию(км) и скорость(км/ч). А также принимает позиционный аргумент - пробки(True/False).
На основании этих аргументов функция должна рассчитать сколько времени займет прохождение пути.
Если пробки True, то время в пути увеличивается в 2 раза. В зависимости от значения пробок
вывести одну из 2ух следующих строк :

"Время пути до пункта назначения без учета пробок ... ч ... мин"
"Время пути до пункта назначения с учетом пробок ... ч ... мин"'''


def convert_hours(hours: float) -> str:
    '''конвертирует время в часы и минуты'''
    hours_part = int(hours)
    min_part = int((hours - hours_part) * 60)
    return f'{hours_part} ч {min_part} мин'


def road(speed: int, distance: int, flag: bool) -> None:
    if flag:
        print(f'Время пути до пункта назначения с учетом пробок {convert_hours(speed / distance * 2)}')
    else:
        print(f'Время пути до пункта назначения без учета пробок {convert_hours(speed / distance)}')


lst = [[1500, 110, False], [1500, 110, True], [500, 80, True], [500, 80, False], [250, 70, True]]

for i in lst:
    road(i[0], i[1], i[2])
